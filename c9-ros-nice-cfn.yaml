# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for dynamic Cloud 9 RoboMaker setups. Creates a Cloud9 and bootstraps the instance, installs DCV, and optionally installs ROS and a simulator.
Parameters:
  C9InstanceType:
    Description: Cloud9 Instance Type
    Type: String
    Default: m6i.xlarge
    AllowedValues:
      - m6i.2xlarge
      - m6i.xlarge
      - t3a.large
      - g4dn.xlarge
    ConstraintDescription: Instance type for the Cloud9 environment.
  ROSVersion:
    Description: Version of ROS to install
    Type: String
    Default: ROS1Melodic
    AllowedValues:
      - ROS1Melodic
      - NoROSUbuntu1804
      #- ROS1Noetic
      #- ROS2Foxy
      #- NoROSUbuntu2004
  Simulator:
    Description: Simulator to install
    Type: String
    Default: Gazebo
    AllowedValues:
      - Gazebo
      - Carla
      - None
  Cloud9AccessRoleName:
    Description: Cloud9 User ARN to permit access to C9 environment
    Type: String
    Default: default
Mappings:
  OSMap:
    ROS1Melodic:
      Ubuntu: Ubuntu1804
    ROS1Noetic:
      Ubuntu: Ubuntu2004
    ROS2Foxy:
      Ubuntu: Ubuntu2004
    NoROSUbuntu1804:
      Ubuntu: Ubuntu1804
    NoROSUbuntu2004:
      Ubuntu: Ubuntu2004
  ComputeMap:
    m6i.xlarge:
      Ubuntu1804: Ubuntu1804CPU
      Ubuntu2004: Ubuntu2004CPU
    m6i.2xlarge:
      Ubuntu1804: Ubuntu1804CPU
      Ubuntu2004: Ubuntu2004CPU
    t3a.large:
      Ubuntu1804: Ubuntu1804CPU
      Ubuntu2004: Ubuntu2004CPU
    g4dn.xlarge:
      Ubuntu1804: Ubuntu1804GPU
      Ubuntu2004: Ubuntu2004GPU
  AMIMap:
    us-east-1:
      Ubuntu1804CPU: ami-005de95e8ff495156
      Ubuntu1804GPU: ami-003566b22128092cd # isaacsim: ami-08084538a6dec4734
      Ubuntu2004CPU: ami-08d4ac5b634553e16 # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      Ubuntu2004GPU: ami-08cb7e65c4e13f22d # Deep Learning AMI GPU PyTorch 1.12.0 (Ubuntu 20.04) 20220824
    us-west-2:
      Ubuntu1804CPU: ami-0cfa91bdbc3be780c
      Ubuntu1804GPU: ami-0475f1fb0e9b1f73f
      Ubuntu2004CPU: ami-0ddf424f81ddb0720 # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      Ubuntu2004GPU: ami-0eaff0d700233c573 # Deep Learning AMI GPU PyTorch 1.12.0 (Ubuntu 20.04) 20220824
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "Cloud9 Dev VPC-${AWS::StackName}"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs
        Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Cloud9 needs a public IP to SSH to the EC2 instance."
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Permit SSH traffic for Cloud9 and 8080 traffic for DCV"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:  0.0.0.0/0
          Description: Allow SSH traffic for Cloud9
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp:  0.0.0.0/0
          Description: Allow DCV traffic
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: EC23
            reason: "Cloud9 needs to be able to SSH(22) and DCV(8080) to this machine, and the IP range it can connect from is not fixed."
          - id: W40
            reason: "TCP and UDP traffic needs to be permitted egress"
          - id: W5
            reason: "Egress is needed for a variety of functions"
          - id: W9
            reason: "Ingress is needed for a variety of functions"
          - id: W2
            reason: "Ingress is needed for a variety of functions"
################## PERMISSIONS AND ROLES #################
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: !Sub "Cloud9Actions-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'cloud9:GetUserPublicKey'
                  - 'cloud9:CreateEnvironmentSSH'
                  - 'cloud9:CreateEnvironmentMembership'
                  - 'cloud9:CreateEnvironmentMembership'
                Resource: 'arn:aws:cloud9:*:*:*'
        - PolicyName: !Sub "RobotActions-${AWS::StackName}"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: [
                      "ecr:GetAuthorizationToken",
                      "ecr:BatchGetImage",
                      "ecr:GetDownloadUrlForLayer"
                        ]
                Resource: 'arn:aws:ecr:*:*:*'
              - Effect: Allow
                Action: [
                      "ssm:UpdateInstanceInformation",
                      "ssmmessages:CreateControlChannel",
                      "ssmmessages:CreateDataChannel",
                      "ssmmessages:OpenControlChannel",
                      "ssmmessages:OpenDataChannel"
                        ]
                Resource: '*'
              #- Effect: Allow
              #  Action: [ "greengrass:*" ]
              #  Resource: arn:aws:greengrass:*:*:*
              #- Effect: Allow
              #  Action: [ "iot:*" ]
              #  Resource: arn:aws:iot:*:*:*
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: IAM4
            reason: "Needs read-only S3 access to be able to fetch the DCV license from an external bucket."
          - id: IAM5
            reason: "Needs to be able to create Cloud9 environments, ECR repositories and SSM sessions, so cannot be restricted to a single resource."
          - id: W11
            reason: "Needs to be able to create Cloud9 environments, ECR repositories and SSM sessions, so cannot be restricted to a single resource."
  C9InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  FlowLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'flowlogs-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogGroups'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'LogGroup.Arn'
################## FLOW LOG #####################
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "No sensitive data is logged in this flow log."
  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'FlowLogRole.Arn'
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: 'VPC'
      TrafficType: REJECT
################## INSTANCE #####################
  DevMachine:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT60M
    Properties:
      ImageId:
        Fn::FindInMap:
          - AMIMap
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - ComputeMap
              - !Ref C9InstanceType
              - Fn::FindInMap:
                  - OSMap
                  - !Ref ROSVersion
                  - "Ubuntu"
      InstanceType: !Ref C9InstanceType
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -v
          ### 1. PREPARATION

          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          sleep 10

          apt-get update && apt-get upgrade -y linux-aws && apt upgrade -y
          if [ -f /var/run/reboot-required ]; then
            rm -f /var/lib/cloud/instances/*/sem/config_scripts_user
            echo rebooting ... $(date)
            reboot
            exit
          fi

          ### 2. DESKTOP

          cd /home/ubuntu

          # runUpdateCommand
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::=''--force-confdef'' -o Dpkg::Options::=''--force-confold'' dist-upgrade -y

          # installAWSCLI
          apt-get install -y python3 python3-dev python3-pip
          pip3 install --upgrade awscli
          # update_pip_and_boto
          pip3 install --upgrade pip boto3 requests

          # install_https_support
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common

          # install_build_essentials
          apt-get install -y build-essential

          # configure_swap_file
          fallocate -l 512MB /var/swapfile && sudo chmod 600 /var/swapfile && sudo mkswap /var/swapfile && echo '/var/swapfile swap swap defaults 0 0' >> /etc/fstab

          # configure_unattended_upgrades
          sed -i 's|//Unattended-Upgrade::InstallOnShutdown "true";|Unattended-Upgrade::InstallOnShutdown "true";|' /etc/apt/apt.conf.d/50unattended-upgrades

          # install_ubuntu_desktop_and_desktop_manager
          if [ ${ROSVersion} == "ROS1Melodic" ] || [ ${ROSVersion} == "NoROSUbuntu1804" ]; then
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ubuntu-desktop lightdm
          else
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ubuntu-desktop gdm3
          fi

          # install_desktop_utilities
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends firefox xterm

          # enable_automatic_login_and_disable_lock_screen
          sed -i 's/^#  AutomaticLogin/AutomaticLogin/' /etc/gdm3/custom.conf
          sed -i 's/user1/ubuntu/' /etc/gdm3/custom.conf
          sudo su -l ubuntu -c "dbus-launch gsettings set org.gnome.desktop.screensaver idle-activation-enabled 'false'"
          sudo su -l ubuntu -c "dbus-launch gsettings set org.gnome.desktop.screensaver lock-enabled 'false'"
          sudo su -l ubuntu -c "dbus-launch gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'"
          sudo su -l ubuntu -c "dbus-launch gsettings set org.gnome.desktop.session idle-delay 0"

          # install_python_2.7_for_cloud9
          apt-get install -y python python-dev

          # fix permissions
          chown -R ubuntu:ubuntu /home/ubuntu/.local

          # Remove the updates notifier
          rm /var/lib/update-notifier/updates-available

          ### 3. DCV
          if [ ${ROSVersion} == "ROS1Melodic" ] || [ ${ROSVersion} == "NoROSUbuntu1804" ]; then
          # get_dcv_pkg
          wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.1/Servers/nice-dcv-2020.1-9012-ubuntu1804-x86_64.tgz && echo "7569c95465743b512f1ab191e58ea09777353b401c1ec130ee8ea344e00f8900 nice-dcv-2020.1-9012-ubuntu1804-x86_64.tgz" | sha256sum -c && tar -xvzf nice-dcv-2020.1-9012-ubuntu1804-x86_64.tgz && rm nice-dcv-2020.1-9012-ubuntu1804-x86_64.tgz

          # install_dcv
          echo Installing DCV for Ubuntu 18.04
          cd nice-dcv-2020.1-9012-ubuntu1804-x86_64 && \
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
          ./nice-dcv-server_2020.1.9012-1_amd64.ubuntu1804.deb \
          ./nice-xdcv_2020.1.338-1_amd64.ubuntu1804.deb

          else
          echo Installing DCV for Ubuntu 20.04
          wget https://d1uj6qtbmh3dt5.cloudfront.net/2022.1/Servers/nice-dcv-2022.1-13300-ubuntu2004-x86_64.tgz
          tar xvfz nice-dcv-2022.1-13300-ubuntu2004-x86_64.tgz
          cd nice-dcv-2022.1-13300-ubuntu2004-x86_64
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
          ./nice-dcv-server_2022.1.13300-1_amd64.ubuntu2004.deb \
          ./nice-xdcv_2022.1.433-1_amd64.ubuntu2004.deb
          fi

          usermod -aG video dcv

          cd /home/ubuntu

          # create_dcv_conf
          cat << 'EOF' > ./dcv.conf
          [license]
          [log]
          [display]
          [connectivity]
          web-port=8080
          web-use-https=false
          [security]
          authentication="none"
          EOF

          # mv_dcv_conf
          mv ./dcv.conf /etc/dcv/dcv.conf

          # enable usb
          /usr/bin/dcvusbdriverinstaller --quiet

          # Configure DCV Session
          sudo su -l ubuntu -c dbus-launch gsettings set org.gnome.shell enabled-extensions "['ubuntu-dock@ubuntu.com']"
          /sbin/iptables -A INPUT -p tcp ! -s localhost --dport 8080 -j DROP
          systemctl start dcvserver
          systemctl enable dcvserver

          # Create service to launch DCV Session on server restart
          cat << 'EOF' > /etc/systemd/system/dcvsession.service
          [Unit]
          Description=NICE DCV Session
          After=dcvserver.service

          [Service]
          User=ubuntu
          ExecStart=/usr/bin/dcv create-session cloud9-session --owner ubuntu

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo systemctl daemon-reload
          sudo systemctl enable dcvsession
          sudo systemctl start dcvsession

          ### 4. ROS

          cd /home/ubuntu
          if [ ${ROSVersion} == "ROS1Melodic" ]; then
          echo Installing ROS Melodic
          git clone https://github.com/aws-robotics/aws-robomaker-sample-application-helloworld.git -b ros1 && cd aws-robomaker-sample-application-helloworld/ && bash -c scripts/setup.sh --install-ros melodic
          cd /home/ubuntu
          rm -rf aws-robomaker-sample-application-helloworld/
          echo "[[ -e /opt/ros/melodic/setup.sh ]] && source /opt/ros/melodic/setup.sh" >> /home/ubuntu/.bashrc
          elif [ ${ROSVersion} == "ROS1Noetic" ]; then
          echo Installing ROS Noetic
          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
          sudo apt update
          sudo apt install ros-noetic-desktop-full
          echo "[[ -e /opt/ros/noetic/setup.bash ]] && source /opt/ros/noetic/setup.bash" >> /home/ubuntu/.bashrc
          elif [ ${ROSVersion} == "ROS2Foxy" ]; then
          sudo apt update && sudo apt install curl gnupg2 lsb-release
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install -y ros-foxy-desktop
          echo "[[ -e /opt/ros/foxy/setup.bash ]] && source /opt/ros/foxy/setup.bash" >> /home/ubuntu/.bashrc
          else
          echo "No ROS"
          fi

          chown -R ubuntu:ubuntu /home/ubuntu/.ros

          ### 5. SIMULATORS
          if [ ${Simulator} == "Gazebo" ]; then
          # Install Gazebo models
          wget https://d3lm3wzny7xda7.cloudfront.net/models.tar
          mkdir /home/ubuntu/.gazebo
          tar -xvf models.tar -C ~ubuntu/.gazebo/
          chown -R ubuntu:ubuntu /home/ubuntu/.gazebo
          elif [ ${Simulator} == "Carla" ]; then
          # Install Carla
          apt install -y libomp5
          pip install --user pygame numpy
          pip3 install --user pygame numpy
          sudo apt install -y libglfw3 libglfw3-dev libjpeg-dev libtiff5-dev libomp-dev fontconfig wget pgp
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1AF1527DE64CB8D9
          sudo add-apt-repository "deb [arch=amd64] http://dist.carla.org/carla $(lsb_release -sc) main"
          sudo apt-get update # Update the Debian package index
          sudo apt-get install -y carla-simulator # Install the latest CARLA version, or update the current installation
          pip3 install carla # Install the CARLA client
          cd /opt/carla-simulator # Open the folder where CARLA is installed
          # Add the extra assets
          wget https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/AdditionalMaps_0.9.13.tar.gz
          ./ImportAssets.sh
          else
          echo "No Simulator"
          fi

          ### 6. CLOUD9

          cd /home/ubuntu
          cat -  << 'EOFPY' > registercloud9.py
          import sys, os, base64, datetime, hashlib, hmac, json, boto3, uuid, time
          import requests # pip install requests
          from botocore.utils import InstanceMetadataFetcher
          from botocore.credentials import InstanceMetadataProvider

          def sign(key, msg):
              return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()

          def getSignatureKey(key, date_stamp, regionName, serviceName):
              kDate = sign(('AWS4' + key).encode('utf-8'), date_stamp)
              kRegion = sign(kDate, regionName)
              kService = sign(kRegion, serviceName)
              kSigning = sign(kService, 'aws4_request')
              return kSigning

          def sigv4_request(amz_target, request_parameters, region, creds):
              method = 'POST'
              service = 'cloud9'
              host = service+'.'+region+'.amazonaws.com'
              endpoint = 'https://'+host
              content_type = 'application/x-amz-json-1.1'

              if creds.access_key is None or creds.secret_key is None:
                  print('No access key is available.')
                  sys.exit()

              t = datetime.datetime.utcnow()
              amz_date = t.strftime('%Y%m%dT%H%M%SZ')
              date_stamp = t.strftime('%Y%m%d')
              canonical_uri = '/'
              canonical_querystring = ''
              canonical_headers = 'content-type:' + content_type + '\n' + 'host:' + host + '\n' + 'x-amz-date:' + amz_date + '\n' + 'x-amz-target:' + amz_target + '\n'
              signed_headers = 'content-type;host;x-amz-date;x-amz-target'
              payload_hash = hashlib.sha256(request_parameters.encode('utf-8')).hexdigest()
              canonical_request = method + '\n' + canonical_uri + '\n' + canonical_querystring + '\n' + canonical_headers + '\n' + signed_headers + '\n' + payload_hash
              algorithm = 'AWS4-HMAC-SHA256'
              credential_scope = date_stamp + '/' + region + '/' + service + '/' + 'aws4_request'
              string_to_sign = algorithm + '\n' +  amz_date + '\n' +  credential_scope + '\n' +  hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()
              signing_key = getSignatureKey(creds.secret_key, date_stamp, region, service)
              signature = hmac.new(signing_key, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()

              authorization_header = algorithm + ' ' + 'Credential=' + creds.access_key + '/' + credential_scope + ', ' +  'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature
              headers = {
                          'Content-Type':content_type,
                          'X-Amz-Date':amz_date,
                          'X-Amz-Target':amz_target,
                          'Content-Length': '2',
                          'Accept-Encoding': 'identity',
                          'User-Agent': 'custom',
                          'Authorization':authorization_header
                      }

              if (creds.token) is not None:
                  headers['x-amz-security-token'] = creds.token

              return requests.post(endpoint, data=request_parameters, headers=headers)

          def set_c9_pub_key(pub_key):
              file1 = open("/home/ubuntu/.ssh/authorized_keys", "a")  # append mode
              file1.write(pub_key)
              file1.close()

          def write_c9_settings(new_data, filename='/home/ubuntu/environment/.c9/project.settings'):
              with open(filename,'r+') as file:
                  file_data = json.load(file)
                  file_data["preview"] = new_data
                  file.seek(0)
                  json.dump(file_data, file, indent = 4)

          def write_instructions_file(URL):
              f = open("/home/ubuntu/environment/instructions-to-open-virtual-desktop.txt", "w")
              f.write("Opening the Ubuntu Virtual Desktop.  \n \n"+
                      "Open a **new** browser tab or window and paste the following URL into the address bar: \n \n"+URL+"\n")
              f.close()

          if __name__ == "__main__":

              r = requests.get('http://169.254.169.254/latest/dynamic/instance-identity/document')
              instance_details = json.loads(r.text)
              region = instance_details['region']
              account_id = instance_details['accountId']
              print("Account ID: "+account_id)
              print("Region: "+region)

              r = requests.get('http://169.254.169.254/latest/meta-data/iam/security-credentials')
              assumedRole = r.text
              print("Assumed role: "+assumedRole)

              r = requests.get('http://169.254.169.254/latest/meta-data/public-hostname')
              hostname = r.text
              print("Hostname: "+hostname)

              session = boto3.Session()
              credentials = session.get_credentials()

              amz_target = 'AWSCloud9WorkspaceManagementService.GetUserPublicKey'
              request_parameters =  '{}'
              request_parameters = '{"roleArn": "arn:aws:iam::'+account_id+':role/'+ assumedRole+'"}'
              r = sigv4_request(amz_target, request_parameters, region, credentials)
              response = json.loads(r.text)
              set_c9_pub_key(response['publicKey'])
              print("Public key written.")

              time.sleep(5)

              amz_target = 'AWSCloud9WorkspaceManagementService.CreateEnvironmentSSH'
              request_parameters =  '{'
              request_parameters +=  '"name":"'+os.getenv('ENVIRONMENT_NAME', default = 'cloud-dev-'+uuid.uuid4().hex)+'",'
              request_parameters +=  '"host":"'+hostname+'",'
              request_parameters += '"roleArn": "arn:aws:iam::'+account_id+':role/'+assumedRole+'",'
              request_parameters +=  '"port":22,'
              request_parameters +=  '"loginName":"'+os.getenv('LOGIN_NAME', default = 'ubuntu')+'",'
              request_parameters +=  '"environmentPath":"'+os.getenv('ENVIRONMENT_PATH', default = '~/environment')+'"'
              request_parameters +=  '}'

              r = sigv4_request(amz_target, request_parameters, region, credentials)
              environment = json.loads(r.text)["environmentId"]
              print("Enviroment: "+environment)

              amz_target = 'AWSCloud9WorkspaceManagementService.CreateEnvironmentMembership'
              request_parameters = '{'
              request_parameters +=  '"environmentId":"'+environment+'",'
              request_parameters +=  '"userArn":"'+os.getenv('ROLE_ARN', 'default')+'",'
              request_parameters +=  '"permissions":"read-write"'
              request_parameters += '}'
              print (request_parameters)

              r = sigv4_request(amz_target, request_parameters, region, credentials)
              print(r.text)

              desktop_url = "http://"+environment+".vfs.cloud9."+region+".amazonaws.com/"
              print(desktop_url)

              write_c9_settings({
                  "@url": desktop_url
              })

              write_instructions_file(desktop_url)

          EOFPY

          cd /home/ubuntu

          # setup_cloud9
          chmod u=rwx,g=rx,o=rx /home/ubuntu
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt update
          sudo apt install -y nodejs
          sudo su -l ubuntu -c 'mkdir -p /home/ubuntu/environment/.c9/'
          runuser -l ubuntu -c 'curl -L https://raw.githubusercontent.com/c9/install/master/install.sh | bash'
          sudo -u ubuntu cat << EOF > ./environment/.c9/.nakignore
          *~backup-*
          .c9revisions
          .c9
          .git
          .svn
          .DS_Store
          .bzr
          .cdv
          ~.dep
          ~.dot
          ~.nib
          ~.plst
          .hg
          .pc
          *.min.js
          .nakignore
          /dev
          EOF
          sudo -u ubuntu cat << EOF > ./environment/.c9/launch.json
          {
              "configurations": []
          }
          EOF
          sudo -u ubuntu cat << EOF > ./environment/.c9/project.settings
          {
              "language": {
                  "tern_defs": {
                      "json()": {
                          "browser": {
                              "enabled": true
                          },
                          "ecma5": {
                              "enabled": true
                          },
                          "jQuery": {
                              "enabled": true
                          }
                      }
                  }
              },
              "launchconfigurations": {
                  "@currentconfig": ""
              },
              "python": {
                  "@path": "/usr/local/lib/python3.4/dist-packages:/usr/local/lib/python3.5/dist-packages"
              },
              "run": {
                  "configs": {
                      "@inited": "true",
                      "json()": {}
                  }
              },
              "welcome": {
                  "@first": true
              }
          }
          EOF
          echo '{"@syncProjectSettings": false}' > '/home/ubuntu/.c9/user.settings'  || true
          chown ubuntu:ubuntu -R ./environment/.c9

          # Register to Cloud9
          sudo su -l ubuntu -c 'echo "{}" > /home/ubuntu/environment/.c9/project.settings'
          sudo su -l ubuntu -c "ROLE_ARN=${Cloud9AccessRoleName} ENVIRONMENT_NAME=RobotWorkshop-${AWS::StackName} python3 registercloud9.py"

          ### 7. COMPLETION

          # Signal creation complete
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.zip
          unzip aws-cfn-bootstrap-py3-latest.zip
          cd aws-cfn-bootstrap-2.0/
          python3 setup.py install
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DevMachine --region ${AWS::Region}

          reboot

      IamInstanceProfile: !Ref C9InstanceProfile
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}"
        -
          Key: Application
          Value: ROS Development Machine
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: EC29
            reason: "Should not be part of an ASG. Should not have Termination Protection disabled, so the CFN can remove the instance when the stack is destroyed."
          - id: IAM5
            reason: "Needs to be able to create Cloud9 environments, ECR repositories and SSM sessions, so cannot be restricted to a single resource."
  #GGv2ManagedPolicy:
  #  Type: AWS::IAM::ManagedPolicy
  #  Properties:
  #    ManagedPolicyName: !Sub "GreengrassV2TokenExchangeRoleAccess-${AWS::StackName}"
  #    PolicyDocument:
  #      Version: '2012-10-17'
  #      Statement:
  #        -
  #          Sid: GreengrassPolicyStatement
  #          Effect: Allow
  #          Action:
  #            - "logs:CreateLogGroup"
  #            - "logs:CreateLogStream"
  #            - "logs:PutLogEvents"
  #            - "logs:DescribeLogStreams"
  #            - "s3:GetBucketLocation"
  #          Resource: "*"
  #GreengrassTokenExchangeRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    RoleName: !Sub "GreengrassV2TokenExchangeRole-${AWS::StackName}"
  #    AssumeRolePolicyDocument:
  #      Version: "2012-10-17"
  #      Statement:
  #        - Effect: Allow
  #          Principal:
  #            Service:
  #              - credentials.iot.amazonaws.com
  #          Action:
  #            - 'sts:AssumeRole'
  #RobotPolicy:
  #  Type: AWS::IAM::Policy
  #  Properties:
  #    PolicyName: !Sub "RobotPolicy-${AWS::StackName}"
  #    PolicyDocument:
  #      Statement:
  #        - Effect: Allow
  #          Action: [
  #                "ecr:GetAuthorizationToken",
  #                "ecr:BatchGetImage",
  #                "ecr:GetDownloadUrlForLayer"
  #                  ]
  #          Resource: '*'
  #        - Effect: Allow
  #          Action: [ "greengrass:*" ] # TODO can this be narrowed, does it need to be?
  #          Resource: '*'
  #        - Effect: Allow
  #          Action: [ "iot:*" ] # TODO can this be narrowed, does it need to be?
  #          Resource: '*'
  #    Roles:  [ !Ref 'GreengrassTokenExchangeRole' ]
  #GreengrassTokenPolicy:
  #  Type: AWS::IAM::Policy
  #  Properties:
  #    PolicyName: !Sub "GreengrassTokenExchangePolicy-${AWS::StackName}"
  #    PolicyDocument:
  #      Statement:
  #        - Effect: Allow
  #          Action: [
  #                  "iot:DescribeCertificate",
  #                  "logs:CreateLogGroup",
  #                  "logs:CreateLogStream",
  #                  "logs:PutLogEvents",
  #                  "logs:DescribeLogStreams",
  #                  "iot:Connect",
  #                  "iot:Publish",
  #                  "iot:Subscribe",
  #                  "iot:Receive",
  #                  "s3:GetBucketLocation"
  #                  ]
  #          Resource: '*'
  #    Roles:  [ !Ref 'GreengrassTokenExchangeRole' ]
  C9CleanUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import urllib3
          import boto3
          def send_response(event, context, response_status, response_data):
            '''Send a resource manipulation status response to CloudFormation'''
            responsebody = json.dumps({
              "Status": response_status,
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event['StackId'],
              "RequestId": event['RequestId'],
              "LogicalResourceId": event['LogicalResourceId'],
              "Data": response_data
            }).encode('utf-8')
            http = urllib3.PoolManager()
            r = http.request(
              'PUT', event['ResponseURL'],
              body=responsebody,
              headers={'Content-Type': 'application/json'}
            )
            print(f"response: {r}")
          def handler( event, context ):
            try:
              print(f'received event {event}')
              if event['RequestType'] == 'Create':
                print('CREATE!')
                send_response(event, context, 'SUCCESS', {'Message': 'Resource creation successful!'})
              elif event['RequestType'] == 'Update':
                print('UPDATE!')
                send_response(event, context, 'SUCCESS', {'Message': 'Resource update successful!'})
              elif event['RequestType'] == 'Delete':
                print('DELETE!')
                client = boto3.client('cloud9')
                list_envs = client.list_environments()
                description_env = client.describe_environments(environmentIds=list_envs['environmentIds'])
                print(description_env)
                target = ""
                for env in description_env["environments"]:
                  if env["type"] == "ssh" and env["name"] == "RobotWorkshop-${AWS::StackName}":
                    target = env["id"]
                    break

                if "" != target:
                  print(f"Target environment is {target}")
                  response = client.delete_environment(environmentId=target)
                  print(response)

                send_response(event, context, 'SUCCESS', {'Message': 'Resource deletion successful!'})
              else:
                print('FAILED!')
                send_response(event, context, 'FAILED', {'Message': 'Unknown message type'})
              return { 'statusCode': '200', 'body': '' }
            except Exception as ex:
              print(ex)
              print('EXCEPTION FAILED!')
              send_response(event, context, 'FAILED', {'Message': 'Unknown message type'})
              return { 'statusCode': '200', 'body': '' }
      Handler: "index.handler"
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda does not need access to any resources in a VPC, so doesn't need to be launched in a VPC."
          - id: W92
            reason: "Lambda only needs to run twice ever, does not need to reserve concurrency."
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloud9:DeleteEnvironment
            - cloud9:ListEnvironments
            - cloud9:DescribeEnvironments
            Resource: 'arn:aws:cloud9:*:*:*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cloud9:DeleteEnvironment
            - cloud9:ListEnvironments
            - cloud9:DescribeEnvironments
            Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: IAM5
            reason: "Lambda needs to be able to create log groups so cannot have a single resource. Also needs to be able to Delete Environments so cannot be restricted to a single resource, as the resource isn't created when the lambda is created."
  C9Cleanup:
    Type: Custom::C9Cleanup
    Properties:
      ServiceToken: !GetAtt C9CleanUpFunction.Arn
Outputs:
  EC2Host:
    Description: EC2 Instance Created.
    Value: !Ref DevMachine
  LogGroupName:
    Description: 'The name of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs.'
    Value: !Ref LogGroup
  LogGroupARN:
    Description: 'The ARN of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs.'
    Value: !GetAtt 'LogGroup.Arn'